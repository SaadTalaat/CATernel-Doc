Saad Talaat , Menna Essa
This will still need numbering when you write it in the doc ; but i don't know what's the chapter so i'll leave it for now 
2nd of November, 2012
=====================

Since the overall kernel design is determined, we need to work more on basic services such as multitasking and memory management. Symmetric Multi-Processor Management, at the moment we are only able to multitask over one processor. Of course, we will be using intel facilities to be able to parallelize over multiple processes. There's challenges faced when it comes to parallelizing execution over a centeralized Data Bus and memory, Such as:
1- Memory Coherency and (making sure that only one processor get acces to a specific memory address at a time).
2- Cache consistency, Since some caches are shared (e.g. L2/L3) corrupted data should be avoided by a processor after being written by another
3- Distribute interrupt handling amongst processors.
4- Avoiding randomized memory accesses.


Memory Coherency
================
Memory coherency can be simply put as follows. It is preventing a cpu from accessing a memory thunk aligned to (8/16/32/64) that is being used by another cpu(former values differ on different architecture). once a value is locked the data bus is automatically locked, so locking here is basically spinlocks. ia32 supports memory locking using atomic operations via several ways :-

*Automated locking*
------------------
Locking a memory address is automatically carried out on several situations
1- executing xchg instruction that reference memory
2- Updating segment descriptor
3- Updating page directory
4- Aknowledging interrupts

the last 3 cases do not really interest us, but the first instruction can be used to make a software locking to memory address. such a locking mechanism force following memory operations to be atomic. An example for that is the classic unix and very early linux. a very basic mutual execlusion was implemented by merely exchanging the to be locked variable with a new value. Such examples are obsolete and old. With Multiprocessors architectures showing up another problem arised.

*Memory ordering*
-----------------
For the sake of performance optimization, more modern processes adopted a new memory ordering(order of loads and stores issued) models. Instead of strong ordering which executes loads and stores with the order they are in the executable code, Modern processors use different memory models where loads and stores don't need to neccessarily done in order they're in the executable.
Due to that fact, busy waiting on a lock might go wrong. since loop is the first in the executable then modifying the lock comes second we suppose we're working on strong ordering modeled memory access. However, this can go badly wrong by obtaining the lock before executing the loop for instance, Maybe even skipping obtaining lock and starting executing critical region. Thus, cpu needs to be instructed to execute a thunk of code's memory loads and stores in the order they're in the executable. And luckily this is what 'mfence' instruction does. Memory ordering is a strict issue since it all gets messy with processors evelution. 486 and Pentium for instance had a less strict memory ordering model than strong ordering but still most of the time it would use strong ordering. P6 family however almost dropped the strong ordering model which Intel name "write ordered with store buffer forwarding".

a premature implementation for the spinlocks would look like this at this point
-----------------------------
lock:
	popl %eax
	movl (%eax), %ebx
	test %ebx,%ebx
	jnz lock
	incl %ebx
	xchgl %ebx,(%eax)
	mfence
	ret

unlock:
	popl %eax
	movl $0, %ebx
	xchgl %ebx,(%eax)
	mfence
	ret
-----------------------------
	Listing X.x
-----------------------------

At this point Intel manuals carry on from memory instructions ordering to the relation between memory ordering and string operations and its atomic properity under multiple processors and interrupts, But this is no use to us at the moment since address spaces forbid interrupts to use user stack. Moreover, generic instructions serializing is a necessity. An exmaple mentioned in Intel manual vol.3 shows how critical instruction serialization could be crucial at some points, This example says: suppose we're switching to protected mode under a multiprocessor envirnoment. we need all real mode instructions to be executed before protected mode is triggered. This is where serializing instructions comes in which makes sure that all instructions before it are executed before the serializing instruction is executed (e.g. CPUID)


*Multi-Processor Initialization*
--------------------------------
Before mentioning the way Multiprocessing is initialized over an intel machine, we need to support and point out cpuid instruction and collecting information about the machine since we'd be having different initialization models for every machine.

Anyway, MP initialization is done by a MP protocol called Multiprocessor Specification Version. It supports controlled booting of multiple processors, It allows all IA-32 processors to be booted in the same manner and it can boot a system without defined boot processor. This MP protocol defines two types of processors which are bootstrap processor and application processors. after power one processor is selected as bootstrap processor and performs the booting up routines. Other processors are set to application processors.

Bootstrap processor stars by setting up the global data structures and initializes other application processors, following that is the Operating system code execution. when machine is powered up, Application processors wait for an IPI signal from the bootstrap processor and then performs APIC initialization procedure and put itself in halt state.

Before initializing processors, cpu information should be collected in order to perform a right initialization sequence. such information collection should be carried out after memory initialization on the BSP since values like global cpu use memory component to allocate space for itself. however we can still store it in absolute address. and we might need that in parallelizing kernel boot up.

CPU information is found in the floating point structure which is usually stored in one of Four places: 
(1) in the first kilobyte of the extended BIOS data area (EBDA)
(2) the last kilobyte of base memory, 
(3) the top of physical memory 
(4) the BIOS read-only memory space between 0xe0000 and 0xfffff. 
we'll need search these areas for the "_MP_" signature  which denotes the start of the floating pointer structure. 
Absence of this structure indicates that the system is not MP compliant ; if not the system will continue with UP setup 

----------------------------------------------------
Listing x-1 : arch/x86/mp/smp.c - find_set_fps
----------------------------------------------------

uint32_t length[2] = { 1024, 64 * 1024 };	
	addr[0] = (uint8_t *) PA2KA(ebda ? (uint32_t)ebda : 639 * 1024);
	for (i = 0; i < 2; i++) {
		for (j = 0; j < length[i]; j += 16) {
			if ((*((uint32_t *) &addr[i][j]) ==
			    FS_SIGNATURE) && (fps_check(&addr[i][j])==0)) {
				fs = (fpstruct_t *) &addr[i][j];
				goto fs_found;
			}
		}
	}
-----------------------------------------------------


floating point sturcture looks like this : 

-----------------------------------
figure x-1 floating point structure
-------------------------------------
Fps image here
-------------------------------------

Next step is to read the Configuration table's address form the floating point structure which will include all cpu's information
"ct=(ct_hdr *)PA2KA((uint32_t)fs->config_addr);" 
The configuration table consists of a header , base table and an extended table.
--------------------------------
figure x-2 Configuration table
--------------------------------
ct1 image here
--------------------------------
with help of the CT header -arch/x86/mp/smp.c - ct_entries() - , you'll be able to locate the processor entries and read them
most of the fields will come in handy later , refer to smp.h to see the full structure of different base entries
-------------------------------
figure x-3 processor entry
------------------------------
processor img here
------------------------------

now that we have all needed cpu info , we can finally signal them to wake up by sending an INIT IPI through the LAPIC in 0xfee00000
we're sending the IPI based on the processor's APIC ID , ofcourse it's a bad idea to send an INIT IPI or SIPI to boot strap since it's already up
so we make sure we check the bootstrap flag in the processor's entry we parsed earlier. 
----------------
listing x-1 arch/x86/mp/apic.c - apic_init_ipi
---------------
void apic_init_ipi(uint8_t lapicid)
{
	icr_t icr;
	icr.lo = lapic[ICR_LOW];
	icr.hi = lapic[ICR_HIGH];	
	icr.delivery_mode = ICR_INIT;
	icr.dest_mode = PHYSICAL;
	icr.level = LEVEL_ASSERT;
	icr.trigger_mode = TRIGMOD_LEVEL;
	icr.shorthand = NO_SH;
	icr.vector = 0;
	icr.dest =lapicid;
	lapic[ICR_LOW] = icr.hi;
	lapic[ICR_HIGH] = icr.lo;
}
--------------------
Intel's specification shows that we need to wait for 20 us till an IPI is successfully delivered , then wait for 
1000 us for a processor to wake up In order to send the Startup IPI which is repsonsible for making the AP jump to custom bootup code to set it up
, 200 us are needed to deliver this IPI ; 

**SIPI is still not working so , to be continued ** 















